




spr1     ; mothership sprite
         .byte 0,126,0
         .byte 1,255,128
         .byte 3,255,192
         .byte 6,219,96
         .byte 15,255,240
         .byte 15,255,240
         .byte 3,153,192
         .byte 1,0,128
		 
;         .BYTE 0,126,0                  ; 00000000 01111110 00000000
;         .BYTE 1,255,128                ; 00000001 11111111 10000000
;         .BYTE 3,255,192                ; 00000011 11111111 11000000
;         .BYTE 6,219,96                 ; 00000110 11011011 01100000
;         .BYTE 15,255,240               ; 00001111 11111111 11110000
;         .BYTE 15,255,240               ; 00001111 11111111 11110000
;         .BYTE 3,153,192                ; 00000011 11111111 11000000
;         .BYTE 1,0,128                  ; 00000001 00000000 10000000
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,255

spr2     ; cannon sprite
         .byte 0,8,0
         .byte 0,28,0
         .byte 0,28,0
         .byte 3,255,224
         .byte 7,255,240
         .byte 7,255,240
         .byte 7,255,240
         .byte 7,255,240
		 
;         .BYTE 0,8,0                    ; 00000000 00001000 00000000
;         .BYTE 0,28,0                   ; 00000000 00011100 00000000
;         .BYTE 0,28,0                   ; 00000000 00011100 00000000
;         .BYTE 3,255,224                ; 00000011 11111111 11100000
;         .BYTE 7,255,240                ; 00000111 11111111 11110000
;         .BYTE 7,255,240                ; 00000111 11111111 11110000
;         .BYTE 7,255,240                ; 00000111 11111111 11110000 
;         .BYTE 7,255,240                ; 00000111 11111111 11110000  
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,255

spr3     ; laser sprite
         .byte 0,8,0
         .byte 0,4,0
         .byte 0,8,0
         .byte 0,16,0
         .byte 0,8,0
         .byte 0,4,0
         .byte 0,8,0
         .byte 0,8,0
		 
;         .BYTE 0,8,0                    ; 00000000 00001000 00000000
;         .BYTE 0,4,0                    ; 00000000 00000100 00000000
;         .BYTE 0,8,0                    ; 00000000 00001000 00000000
;         .BYTE 0,16,0                   ; 00000000 00010000 00000000
;         .BYTE 0,8,0                    ; 00000000 00001000 00000000
;         .BYTE 0,4,0                    ; 00000000 00000100 00000000
;         .BYTE 0,8,0                    ; 00000000 00001000 00000000
;         .BYTE 0,8,0                    ; 00000000 00001000 00000000
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,255

spr4     ; explosion
         .byte 0,66,0
         .byte 1,36,128
         .byte 0,129,0
         .byte 6,0,96
         .byte 0,129,0
         .byte 1,36,128
         .byte 0,66,0
         .byte 0,0,0
		 
;         .BYTE 0,66,0                  ; 00000000 01000010 00000000
;         .BYTE 1,36,128                ; 00000001 00100100 10000000
;         .BYTE 0,129,0                 ; 00000000 10000001 00000000
;         .BYTE 6,0,96                  ; 00000110 00000000 01100000
;         .BYTE 0,129,0                 ; 00000000 10000001 00000000
;         .BYTE 1,36,128                ; 00000001 00100100 10000000
;         .BYTE 0,66,0                  ; 00000000 01000010 00000000
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,0,0,0,0,0,0,0,0,0
         .byte 0,0,0,255
         
         
         
         

; The color overlay is done by shifting missile positions right at
; the same rate that this image bitmap is shifted left through the 
; missile memory.  The appearance is like a color window sliding 
; across the animated title pixels.
; 

; Shifty bits.  Byte, left shift, byte, right shift
; ((BYTE1 & MASK1) << OFFSET1) | ((BYTE2 & MASK2) >> OFFSET2) 
; (-) 01111111 << 1 | (-) 10000000 >> 7 (N/A)
; (0) 00111111 << 2 | (1) 11000000 >> 6 (Zero)
; (0) 00011111 << 3 | (1) 11100000 >> 5 (1)
; (0) 00001111 << 4 | (1) 11110000 >> 4 (2)
; (0) 00000111 << 5 | (1) 11111000 >> 3 (3)
; (0) 00000011 << 6 | (1) 11111100 >> 2 (4)
; (0) 00000001 << 7 | (1) 11111110 >> 1 (5)
; (1) 00000000 << 0 | (-) -------- >> 0 (6)
; (1) 01111111 << 1 | (2) 10000000 >> 7 (7)
; (1) 00111111 << 2 | (2) 11000000 >> 6 (8)
; (1) 00011111 << 3 | (2) 11100000 >> 5 (9)
; (1) 00001111 << 4 | (2) 11110000 >> 4 (10)
; (1) 00000111 << 5 | (2) 11111000 >> 3 (11)
; (1) 00000011 << 6 | (2) 11111100 >> 2 (12)
; (1) 00000001 << 7 | (2) 11111110 >> 1 (13)
; (2) 00000000 << 0 | (-) -------- >> 0 (14)
; (2) 01111111 << 1 | (3) 10000000 >> 7 (15)
. . .
; (4) 00000001 << 7 | (5) 11111110 >> 1 (37)
; (5) 00000000 << 0 | (-) -------- >> 0 (38)
; (5) 01111111 << 1 | (6) 10000000 >> 7 (39)
; (5) 00111111 << 2 | (6) 11000000 >> 6 (40)
; (5) 00011111 << 3 | (6) 11100000 >> 5 (41)
; (5) 00001111 << 4 | (6) 11110000 >> 4 (42)
; (5) 00000111 << 5 | (6) 11111000 >> 3 (43)
; (5) 00000011 << 6 | (6) 11111100 >> 2 (44) (end)/clear, zero.
; (-) 00000001 << 7 | (1) 11111110 >> 1 (N/A)

PM_TITLE_BITMAP 
; -------- 000000  00001111  11111122  22222222  33333333  3344444
; -------- 012345  67890123  45678901  23456789  01234567  8901234- ---------
; -------- ******  **
;	.by %00000000 %00010100 %01010001 %00010111 %00011111 %01111000 %00000000  
;	.by %00000000 %00100110 %01010001 %00110100 %10010000 %01000100 %00000000
;	.by %00000000 %00010101 %01010010 %01010100 %01010110 %01000100 %00000000
;	.by %00000000 %00010100 %11010100 %10010100 %01010000 %01011000 %00000000
;	.by %00000000 %00010100 %01011001 %01110100 %01010000 %01000100 %00000000
;	.by %00000000 %00010100 %01010001 %00010101 %11011111 %01000100 %00000000

; Pre-shifting the data requires 43 bytes per line, (ignoring the all 0/blank 
; positions at the start and end of the animation) or 258 bytes total .
; (Hmmm. One pixel less and this would have fit in a page. What a bummer.)
; A set of lookup tables to drive logic needs 43 entries each for 
; two byte offsets, and two shift values, or 172 bytes, plus 30 bytes for 
; the bitmap itself, or 202 bytes, not including all the extra code needed 
; to shift and bash bits together.
; The data driving method is less code, so faster, and what's a few wasted 
; bytes of storage mean between friends?

;	.by 00000000101000101000100010111000111110111100000000  
;	.by 00000001001100101000100110100100100000100010000000
;	.by 00000000101010101001001010100010101100100010000000
;	.by 00000000101001101010010010100010100000101100000000
;	.by 00000000101000101100101110100010100000100010000000
;	.by 00000000101000101000100010101110111110100010000000

PM_TITLE_BITMAP_LINE1 ;	.by 00000000101000101000100010111000111110111100000000
	.by 00000000 ; 101000101000100010111000111110111100000000
	.by 00000001 ; 01000101000100010111000111110111100000000
	.by 00000010 ; 1000101000100010111000111110111100000000
	.by 00000101 ; 000101000100010111000111110111100000000
	.by 00001010 ; 00101000100010111000111110111100000000
	.by 00010100 ; 0101000100010111000111110111100000000
	.by 00101000 ; 101000100010111000111110111100000000
	.by 01010001 ; 01000100010111000111110111100000000
	.by 10100010 ; 1000100010111000111110111100000000
	.by 01000101 ; 000100010111000111110111100000000
	.by 10001010 ; 00100010111000111110111100000000
	.by 00010100 ; 0100010111000111110111100000000
	.by 00101000 ; 100010111000111110111100000000
	.by 01010001 ; 00010111000111110111100000000
	.by 10100010 ; 0010111000111110111100000000
	.by 01000100 ; 010111000111110111100000000
	.by 10001000 ; 10111000111110111100000000
	.by 00010001 ; 0111000111110111100000000
	.by 00100010 ; 111000111110111100000000
	.by 01000101 ; 11000111110111100000000
	.by 10001011 ; 1000111110111100000000
	.by 00010111 ; 000111110111100000000
	.by 00101110 ; 00111110111100000000
	.by 01011100 ; 0111110111100000000
	.by 10111000 ; 111110111100000000
	.by 01110001 ; 11110111100000000
	.by 11100011 ; 1110111100000000
	.by 11000111 ; 110111100000000
	.by 10001111 ; 10111100000000
	.by 00011111 ; 0111100000000
	.by 00111110 ; 111100000000
	.by 01111101 ; 11100000000
	.by 11111011 ; 1100000000
	.by 11110111 ; 100000000
	.by 11101111 ; 00000000
	.by 11011110 ; 0000000
	.by 10111100 ; 000000
	.by 01111000 ; 00000
	.by 11110000 ; 0000
	.by 11100000 ; 000
	.by 11000000 ; 00
	.by 10000000 ; 0
	.by 00000000


PM_TITLE_BITMAP_LINE2
	.by 00000001001100101000100110100100100000100010000000

PM_TITLE_BITMAP_LINE3
	.by 00000000101010101001001010100010101100100010000000

PM_TITLE_BITMAP_LINE4
	.by 00000000101001101010010010100010100000101100000000

PM_TITLE_BITMAP_LINE5
	.by 00000000101000101100101110100010100000100010000000

PM_TITLE_BITMAP_LINE6
	.by 00000000101000101000100010101110111110100010000000
         
